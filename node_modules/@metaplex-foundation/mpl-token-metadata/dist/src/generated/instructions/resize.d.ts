/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type ResizeInstructionAccounts = {
    /** The metadata account of the digital asset */
    metadata?: PublicKey | Pda;
    /** The master edition or edition account of the digital asset, an uninitialized account for fungible assets */
    edition?: PublicKey | Pda;
    /** Mint of token asset */
    mint: PublicKey | Pda;
    /** The recipient of the excess rent and authority if the authority account is not present */
    payer?: PublicKey | Pda | Signer;
    /** Owner of the asset for (p)NFTs, or mint authority for fungible assets, if different from the payer */
    authority?: Signer;
    /** Token or Associated Token account */
    token?: PublicKey | Pda;
    /** System program */
    systemProgram?: PublicKey | Pda;
};
export type ResizeInstructionData = {
    discriminator: number;
};
export type ResizeInstructionDataArgs = {};
export declare function getResizeInstructionDataSerializer(): Serializer<ResizeInstructionDataArgs, ResizeInstructionData>;
export declare function resize(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: ResizeInstructionAccounts): TransactionBuilder;
